#include <stdio.h>
#include <stdlib.h>

// Process structure
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time of the process
    int burst_time;     // Burst time of the process
    int remaining_time; // Remaining burst time of the process
    int turnaround_time;// Turnaround time of the process
    int waiting_time;   // Waiting time of the process
} Process;

// Function to simulate Round Robin scheduling algorithm
void roundRobin(Process processes[], int n, int quantum) {
    int remaining_processes = n;
    int currentTime = 0;

    // Loop until all processes are executed
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                // Execute process for the quantum or remaining time, whichever is smaller
                int execute_time = (processes[i].remaining_time < quantum) ? processes[i].remaining_time : quantum;
                
                // Update remaining time for the process
                processes[i].remaining_time -= execute_time;
                
                // Update current time
                currentTime += execute_time;

                // Update waiting and turnaround time if process is completed
                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                    processes[i].turnaround_time = currentTime - processes[i].arrival_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
                }
            }
        }
    }
}

// Function to calculate average waiting and turnaround time
void calculateAverageTime(Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    // Calculate waiting and turnaround time for each process
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Calculate and display average waiting and turnaround time
    printf("Average Waiting Time = %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time = %.2f\n", total_turnaround_time / n);
}

int main() {
    int n; // Number of processes
    int quantum; // Time quantum

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    
