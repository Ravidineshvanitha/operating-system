#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILENAME "employee.dat"
#define MAX_EMPLOYEES 100
#define MAX_NAME_LENGTH 50

// Structure to represent an employee
typedef struct {
    int id;
    char name[MAX_NAME_LENGTH];
    float salary;
} Employee;

// Function to add an employee record to the file
void addEmployee() {
    FILE *file = fopen(FILENAME, "ab");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    Employee employee;

    printf("Enter employee ID: ");
    scanf("%d", &employee.id);
    printf("Enter employee name: ");
    scanf("%s", employee.name);
    printf("Enter employee salary: ");
    scanf("%f", &employee.salary);

    fwrite(&employee, sizeof(Employee), 1, file);

    fclose(file);
}

// Function to display all employee records from the file
void displayEmployees() {
    FILE *file = fopen(FILENAME, "rb");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    Employee employee;

    printf("\nEmployee Details:\n");
    printf("ID\tName\tSalary\n");
    while (fread(&employee, sizeof(Employee), 1, file) == 1) {
        printf("%d\t%s\t%.2f\n", employee.id, employee.name, employee.salary);
    }

    fclose(file);
}

// Function to update an employee record in the file
void updateEmployee() {
    int id;
    printf("Enter employee ID to update: ");
    scanf("%d", &id);

    FILE *file = fopen(FILENAME, "r+b");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    Employee employee;

    int found = 0;
    while (fread(&employee, sizeof(Employee), 1, file) == 1) {
        if (employee.id == id) {
            printf("Enter new name: ");
            scanf("%s", employee.name);
            printf("Enter new salary: ");
            scanf("%f", &employee.salary);

            fseek(file, -sizeof(Employee), SEEK_CUR);
            fwrite(&employee, sizeof(Employee), 1, file);
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Employee with ID %d not found.\n", id);
    }

    fclose(file);
}

// Function to delete an employee record from the file
void deleteEmployee() {
    int id;
    printf("Enter employee ID to delete: ");
    scanf("%d", &id);

    FILE *tempFile = fopen("temp.dat", "wb");
    if (tempFile == NULL) {
        perror("Error creating temporary file");
        return;
    }

    FILE *file = fopen(FILENAME, "rb");
    if (file == NULL) {
        perror("Error opening file");
        fclose(tempFile);
        return;
    }

    Employee employee;
    int found = 0;
    while (fread(&employee, sizeof(Employee), 1, file) == 1) {
        if (employee.id != id) {
            fwrite(&employee, sizeof(Employee), 1, tempFile);
        } else {
            found = 1;
        }
    }

    fclose(file);
    fclose(tempFile);

    if (!found) {
        printf("Employee with ID %d not found.\n", id);
        remove("temp.dat");
        return;
    }

    remove(FILENAME);
    rename("temp.dat", FILENAME);
    printf("Employee with ID %d deleted successfully.\n", id);
}

int main() {
    int choice;

    while (1) {
        printf("\nEmployee Management System\n");
        printf("1. Add Employee\n");
        printf("2. Display Employees\n");
        printf("3. Update Employee\n");
        printf("4. Delete Employee\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee();
                break;
            case 2:
                displayEmployees();
                break;
            case 3:
                updateEmployee();
                break;
            case 4:
                deleteEmployee();
                break;
            case 5:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    }

    return 0;
}
